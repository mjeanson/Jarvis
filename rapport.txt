Fonctions Tricheuses (25%)
--------------------------
* basictypes.txt:
  * Ajouter les nouveaux opérateurs au dictionnaire des méthodes des classes bool et int
* BooleanXXXFunction.java:
  * Implémenter une classe pour chaque nouvel opérateur en se basant sur le code des classes int existantes
* JarvisInterpreter.java: 
  * Ajouter les classe à l'environnement


Rectangle (50%)
---------------
* Rectangle.txt: 
  * Implémenter la fonction fonctionAbs qui retourne la valeure absolue d'un JarvisInt en se basant sur l'exemple ifelse
  * Modifier la classe rectangle pour appeler la fonction fonctionAbs sur le resultat du calcul de la longueur et de la largeur


L'héritage, première partie (75%)
---------------------------------
* basictypes.txt: 
  * Créer une nouvelle classe Object avec une liste d'attributs vide, un dictionnaire de methode vide et un 3e parametre contenant la string NULL qui représentera l'absence de classe parente
  * Modifier les définitions de classes existantes pour ajouter la classe parente dans le 3e parametre
* heritagemethodes.txt:
  * Modifier les définitions de classes existantes pour ajouter la classe parente dans le 3e parametre
* JarvisObject.java:
  * Ajouter la constante "SUPER_FIELD" dans la classe JarvisObject 
  * Modifier la méthode "message()" pour aller chercher l'attribut "super" de la classe de l'objet et chercher recursivement la hierachie des classe jusqu'a NULL
* JarvisInterpreter.java:
  * Ajouter le membre "super" dans createClassClass

Le mutateur universel (90%)
---------------------------
NOTE: Implementation non-fonctionnelle dans la branche git WIP-muta

* basictypes.txt:
  * Ajouter l'opérateur set au disctionnaire de methode de la classe "Object"
* OperatorSetFunction.java:
  * Recuperer la liste des attributs dans la classe de l'objet
  * Trouver la position du membre a modifier dans la liste
  * Si la valeur a inserer est un JarvisObject, recuperer le JarvisAtom dans le membre "value"
  * Inserer la valeur dans le bon objet de l'environnement a la bonne position de la liste d'attributs
* JarvisInterpreter.java:
  * Ajouter la classe "OperatorSetFunction" à l'environnement
* JarvisObject.java:
  * Ajout de fonctions pour interagir avec la liste "values"

L'héritage, deuxième partie (100%)
----------------------------------
NOTE: Implementation non-fonctionnele dans la branche git WIP-heritage2

* JarvisObject.java:
  * Dans la methode "message", parcourir l'arbre de superclasses, recuperer les attributs et generer une liste de tous les attributs.
* OperatorNewFunction.java:
  * Parcourir l'arbre de superclasses et compter les attributs.

Les variables de classe (105%)
------------------------------
